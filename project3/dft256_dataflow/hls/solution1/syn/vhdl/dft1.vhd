-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dft1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    real_sample_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    real_sample_ce0 : OUT STD_LOGIC;
    real_sample_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    imag_sample_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    imag_sample_ce0 : OUT STD_LOGIC;
    imag_sample_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dft_real_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dft_real_ce0 : OUT STD_LOGIC;
    dft_real_we0 : OUT STD_LOGIC;
    dft_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dft_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dft_imag_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    dft_imag_ce0 : OUT STD_LOGIC;
    dft_imag_we0 : OUT STD_LOGIC;
    dft_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dft_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dft1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cos_coefficients_tab_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cos_coefficients_tab_1_ce0 : STD_LOGIC;
    signal cos_coefficients_tab_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_tab_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_coefficients_tab_1_ce0 : STD_LOGIC;
    signal sin_coefficients_tab_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_2_fu_181_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal n_2_reg_224 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal real_sample_addr_reg_229 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal imag_sample_addr_reg_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_3_fu_203_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal w_3_reg_242 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dft_real_addr_reg_257 : STD_LOGIC_VECTOR (7 downto 0);
    signal dft_imag_addr_reg_262 : STD_LOGIC_VECTOR (7 downto 0);
    signal cos_coefficients_tab_3_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal real_sample_load_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal sin_coefficients_tab_3_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal imag_sample_load_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_301 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal dft_real_load_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal dft_imag_load_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal w_reg_122 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal n_cast_fu_169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ind_cast_fu_215_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_cast2_fu_187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_133_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_137_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_137_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_193_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ind_fu_209_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_133_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component top_faddfsub_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_fadd_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_fmul_32ns_32nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft1_cos_coefficibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dft1_sin_coefficicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cos_coefficients_tab_1_U : component dft1_cos_coefficibkb
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cos_coefficients_tab_1_address0,
        ce0 => cos_coefficients_tab_1_ce0,
        q0 => cos_coefficients_tab_1_q0);

    sin_coefficients_tab_1_U : component dft1_sin_coefficicud
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sin_coefficients_tab_1_address0,
        ce0 => sin_coefficients_tab_1_ce0,
        q0 => sin_coefficients_tab_1_q0);

    top_faddfsub_32nsdEe_U0 : component top_faddfsub_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_133_p0,
        din1 => grp_fu_133_p1,
        opcode => grp_fu_133_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_133_p2);

    top_fadd_32ns_32neOg_U1 : component top_fadd_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_137_p0,
        din1 => grp_fu_137_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_137_p2);

    top_fmul_32ns_32nfYi_U2 : component top_fmul_32ns_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cos_coefficients_tab_3_reg_267,
        din1 => real_sample_load_reg_273,
        ce => ap_const_logic_1,
        dout => grp_fu_141_p2);

    top_fmul_32ns_32nfYi_U3 : component top_fmul_32ns_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sin_coefficients_tab_3_reg_279,
        din1 => imag_sample_load_reg_285,
        ce => ap_const_logic_1,
        dout => grp_fu_145_p2);

    top_fmul_32ns_32nfYi_U4 : component top_fmul_32ns_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sin_coefficients_tab_3_reg_279,
        din1 => real_sample_load_reg_273,
        ce => ap_const_logic_1,
        dout => grp_fu_149_p2);

    top_fmul_32ns_32nfYi_U5 : component top_fmul_32ns_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cos_coefficients_tab_3_reg_267,
        din1 => imag_sample_load_reg_285,
        ce => ap_const_logic_1,
        dout => grp_fu_153_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_175_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    n_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_197_p2 = ap_const_lv1_1))) then 
                n_reg_110 <= n_2_reg_224;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
                n_reg_110 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    w_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                w_reg_122 <= w_3_reg_242;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_175_p2 = ap_const_lv1_0))) then 
                w_reg_122 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cos_coefficients_tab_3_reg_267 <= cos_coefficients_tab_1_q0;
                imag_sample_load_reg_285 <= imag_sample_q0;
                real_sample_load_reg_273 <= real_sample_q0;
                sin_coefficients_tab_3_reg_279 <= sin_coefficients_tab_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond_fu_197_p2))) then
                dft_imag_addr_reg_262 <= w_cast2_fu_187_p1(8 - 1 downto 0);
                dft_real_addr_reg_257 <= w_cast2_fu_187_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                dft_imag_load_reg_316 <= dft_imag_q0;
                dft_real_load_reg_311 <= dft_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_175_p2 = ap_const_lv1_0))) then
                imag_sample_addr_reg_234 <= n_cast_fu_169_p1(8 - 1 downto 0);
                real_sample_addr_reg_229 <= n_cast_fu_169_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_2_reg_224 <= n_2_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_157 <= grp_fu_133_p2;
                reg_163 <= grp_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_1_reg_296 <= grp_fu_145_p2;
                tmp_4_reg_301 <= grp_fu_149_p2;
                tmp_5_reg_306 <= grp_fu_153_p2;
                tmp_s_reg_291 <= grp_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                w_3_reg_242 <= w_3_fu_203_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_175_p2, ap_CS_fsm_state3, exitcond_fu_197_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_175_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_197_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond1_fu_175_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_175_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_175_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_175_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cos_coefficients_tab_1_address0 <= ind_cast_fu_215_p1(8 - 1 downto 0);

    cos_coefficients_tab_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cos_coefficients_tab_1_ce0 <= ap_const_logic_1;
        else 
            cos_coefficients_tab_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dft_imag_address0 <= dft_imag_addr_reg_262;

    dft_imag_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            dft_imag_ce0 <= ap_const_logic_1;
        else 
            dft_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dft_imag_d0 <= reg_163;

    dft_imag_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dft_imag_we0 <= ap_const_logic_1;
        else 
            dft_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dft_real_address0 <= dft_real_addr_reg_257;

    dft_real_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            dft_real_ce0 <= ap_const_logic_1;
        else 
            dft_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dft_real_d0 <= reg_157;

    dft_real_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dft_real_we0 <= ap_const_logic_1;
        else 
            dft_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_175_p2 <= "1" when (n_reg_110 = ap_const_lv8_80) else "0";
    exitcond_fu_197_p2 <= "1" when (w_reg_122 = ap_const_lv9_100) else "0";

    grp_fu_133_opcode_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_133_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_133_opcode <= ap_const_lv2_0;
        else 
            grp_fu_133_opcode <= "XX";
        end if; 
    end process;


    grp_fu_133_p0_assign_proc : process(tmp_s_reg_291, dft_real_load_reg_311, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_133_p0 <= dft_real_load_reg_311;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_133_p0 <= tmp_s_reg_291;
        else 
            grp_fu_133_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_133_p1_assign_proc : process(reg_157, tmp_1_reg_296, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_133_p1 <= reg_157;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_133_p1 <= tmp_1_reg_296;
        else 
            grp_fu_133_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_137_p0_assign_proc : process(tmp_4_reg_301, dft_imag_load_reg_316, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_137_p0 <= dft_imag_load_reg_316;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_137_p0 <= tmp_4_reg_301;
        else 
            grp_fu_137_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_137_p1_assign_proc : process(reg_163, tmp_5_reg_306, ap_CS_fsm_state9, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_137_p1 <= reg_163;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_137_p1 <= tmp_5_reg_306;
        else 
            grp_fu_137_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    imag_sample_address0 <= imag_sample_addr_reg_234;

    imag_sample_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            imag_sample_ce0 <= ap_const_logic_1;
        else 
            imag_sample_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ind_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ind_fu_209_p2),32));
    ind_fu_209_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(n_reg_110) * signed(tmp_fu_193_p1))), 8));
    n_2_fu_181_p2 <= std_logic_vector(signed(n_reg_110) + signed(ap_const_lv8_1));
    n_cast_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_110),32));
    real_sample_address0 <= real_sample_addr_reg_229;

    real_sample_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            real_sample_ce0 <= ap_const_logic_1;
        else 
            real_sample_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sin_coefficients_tab_1_address0 <= ind_cast_fu_215_p1(8 - 1 downto 0);

    sin_coefficients_tab_1_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sin_coefficients_tab_1_ce0 <= ap_const_logic_1;
        else 
            sin_coefficients_tab_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_193_p1 <= w_reg_122(8 - 1 downto 0);
    w_3_fu_203_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(w_reg_122));
    w_cast2_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_reg_122),32));
end behav;
