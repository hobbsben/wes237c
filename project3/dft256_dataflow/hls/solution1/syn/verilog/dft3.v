// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dft3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        real_sample_address0,
        real_sample_ce0,
        real_sample_q0,
        imag_sample_address0,
        imag_sample_ce0,
        imag_sample_q0,
        dft_real_address0,
        dft_real_ce0,
        dft_real_we0,
        dft_real_d0,
        dft_imag_address0,
        dft_imag_ce0,
        dft_imag_we0,
        dft_imag_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] real_sample_address0;
output   real_sample_ce0;
input  [31:0] real_sample_q0;
output  [7:0] imag_sample_address0;
output   imag_sample_ce0;
input  [31:0] imag_sample_q0;
output  [7:0] dft_real_address0;
output   dft_real_ce0;
output   dft_real_we0;
output  [31:0] dft_real_d0;
output  [7:0] dft_imag_address0;
output   dft_imag_ce0;
output   dft_imag_we0;
output  [31:0] dft_imag_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg real_sample_ce0;
reg imag_sample_ce0;
reg dft_real_ce0;
reg dft_real_we0;
reg dft_imag_ce0;
reg dft_imag_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] w_cast_fu_85_p1;
reg   [31:0] w_cast_reg_103;
wire    ap_CS_fsm_state2;
wire   [8:0] w_1_fu_97_p2;
reg   [8:0] w_1_reg_112;
wire   [0:0] exitcond_fu_91_p2;
reg   [8:0] w_reg_74;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_91_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        w_reg_74 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        w_reg_74 <= w_1_reg_112;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        w_1_reg_112 <= w_1_fu_97_p2;
        w_cast_reg_103[8 : 0] <= w_cast_fu_85_p1[8 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_91_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_91_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dft_imag_ce0 = 1'b1;
    end else begin
        dft_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dft_imag_we0 = 1'b1;
    end else begin
        dft_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dft_real_ce0 = 1'b1;
    end else begin
        dft_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dft_real_we0 = 1'b1;
    end else begin
        dft_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        imag_sample_ce0 = 1'b1;
    end else begin
        imag_sample_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        real_sample_ce0 = 1'b1;
    end else begin
        real_sample_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_91_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

assign dft_imag_address0 = w_cast_reg_103;

assign dft_imag_d0 = imag_sample_q0;

assign dft_real_address0 = w_cast_reg_103;

assign dft_real_d0 = real_sample_q0;

assign exitcond_fu_91_p2 = ((w_reg_74 == 9'd256) ? 1'b1 : 1'b0);

assign imag_sample_address0 = w_cast_fu_85_p1;

assign real_sample_address0 = w_cast_fu_85_p1;

assign w_1_fu_97_p2 = (w_reg_74 + 9'd1);

assign w_cast_fu_85_p1 = w_reg_74;

always @ (posedge ap_clk) begin
    w_cast_reg_103[31:9] <= 23'b00000000000000000000000;
end

endmodule //dft3
