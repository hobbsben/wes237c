// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _top_HH_
#define _top_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "dft1.h"
#include "dft2.h"
#include "dft3.h"
#include "top_Stage1_real.h"

namespace ap_rtl {

struct top : public sc_module {
    // Port declarations 46
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<8> > real_sample_address0;
    sc_out< sc_logic > real_sample_ce0;
    sc_out< sc_lv<32> > real_sample_d0;
    sc_in< sc_lv<32> > real_sample_q0;
    sc_out< sc_logic > real_sample_we0;
    sc_out< sc_lv<8> > real_sample_address1;
    sc_out< sc_logic > real_sample_ce1;
    sc_out< sc_lv<32> > real_sample_d1;
    sc_in< sc_lv<32> > real_sample_q1;
    sc_out< sc_logic > real_sample_we1;
    sc_out< sc_lv<8> > imag_sample_address0;
    sc_out< sc_logic > imag_sample_ce0;
    sc_out< sc_lv<32> > imag_sample_d0;
    sc_in< sc_lv<32> > imag_sample_q0;
    sc_out< sc_logic > imag_sample_we0;
    sc_out< sc_lv<8> > imag_sample_address1;
    sc_out< sc_logic > imag_sample_ce1;
    sc_out< sc_lv<32> > imag_sample_d1;
    sc_in< sc_lv<32> > imag_sample_q1;
    sc_out< sc_logic > imag_sample_we1;
    sc_out< sc_lv<8> > dft_real_address0;
    sc_out< sc_logic > dft_real_ce0;
    sc_out< sc_lv<32> > dft_real_d0;
    sc_in< sc_lv<32> > dft_real_q0;
    sc_out< sc_logic > dft_real_we0;
    sc_out< sc_lv<8> > dft_real_address1;
    sc_out< sc_logic > dft_real_ce1;
    sc_out< sc_lv<32> > dft_real_d1;
    sc_in< sc_lv<32> > dft_real_q1;
    sc_out< sc_logic > dft_real_we1;
    sc_out< sc_lv<8> > dft_imag_address0;
    sc_out< sc_logic > dft_imag_ce0;
    sc_out< sc_lv<32> > dft_imag_d0;
    sc_in< sc_lv<32> > dft_imag_q0;
    sc_out< sc_logic > dft_imag_we0;
    sc_out< sc_lv<8> > dft_imag_address1;
    sc_out< sc_logic > dft_imag_ce1;
    sc_out< sc_lv<32> > dft_imag_d1;
    sc_in< sc_lv<32> > dft_imag_q1;
    sc_out< sc_logic > dft_imag_we1;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const2;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;


    // Module declarations
    top(sc_module_name name);
    SC_HAS_PROCESS(top);

    ~top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    top_Stage1_real* Stage1_real_U;
    top_Stage1_real* Stage1_imag_U;
    top_Stage1_real* Stage2_real_U;
    top_Stage1_real* Stage2_imag_U;
    dft1* dft1_U0;
    dft2* dft2_U0;
    dft3* dft3_U0;
    sc_signal< sc_lv<32> > Stage1_real_i_q0;
    sc_signal< sc_lv<32> > Stage1_real_t_q0;
    sc_signal< sc_lv<32> > Stage1_imag_i_q0;
    sc_signal< sc_lv<32> > Stage1_imag_t_q0;
    sc_signal< sc_lv<32> > Stage2_real_i_q0;
    sc_signal< sc_lv<32> > Stage2_real_t_q0;
    sc_signal< sc_lv<32> > Stage2_imag_i_q0;
    sc_signal< sc_lv<32> > Stage2_imag_t_q0;
    sc_signal< sc_logic > dft1_U0_ap_start;
    sc_signal< sc_logic > dft1_U0_ap_done;
    sc_signal< sc_logic > dft1_U0_ap_continue;
    sc_signal< sc_logic > dft1_U0_ap_idle;
    sc_signal< sc_logic > dft1_U0_ap_ready;
    sc_signal< sc_lv<8> > dft1_U0_real_sample_address0;
    sc_signal< sc_logic > dft1_U0_real_sample_ce0;
    sc_signal< sc_lv<8> > dft1_U0_imag_sample_address0;
    sc_signal< sc_logic > dft1_U0_imag_sample_ce0;
    sc_signal< sc_lv<8> > dft1_U0_dft_real_address0;
    sc_signal< sc_logic > dft1_U0_dft_real_ce0;
    sc_signal< sc_logic > dft1_U0_dft_real_we0;
    sc_signal< sc_lv<32> > dft1_U0_dft_real_d0;
    sc_signal< sc_lv<8> > dft1_U0_dft_imag_address0;
    sc_signal< sc_logic > dft1_U0_dft_imag_ce0;
    sc_signal< sc_logic > dft1_U0_dft_imag_we0;
    sc_signal< sc_lv<32> > dft1_U0_dft_imag_d0;
    sc_signal< sc_logic > ap_channel_done_Stage1_imag;
    sc_signal< sc_logic > dft1_U0_dft_imag_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_Stage1_imag;
    sc_signal< sc_logic > ap_sync_channel_write_Stage1_imag;
    sc_signal< sc_logic > ap_channel_done_Stage1_real;
    sc_signal< sc_logic > dft1_U0_dft_real_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_Stage1_real;
    sc_signal< sc_logic > ap_sync_channel_write_Stage1_real;
    sc_signal< sc_logic > dft2_U0_ap_start;
    sc_signal< sc_logic > dft2_U0_ap_done;
    sc_signal< sc_logic > dft2_U0_ap_continue;
    sc_signal< sc_logic > dft2_U0_ap_idle;
    sc_signal< sc_logic > dft2_U0_ap_ready;
    sc_signal< sc_lv<8> > dft2_U0_real_sample_address0;
    sc_signal< sc_logic > dft2_U0_real_sample_ce0;
    sc_signal< sc_lv<8> > dft2_U0_imag_sample_address0;
    sc_signal< sc_logic > dft2_U0_imag_sample_ce0;
    sc_signal< sc_lv<8> > dft2_U0_dft_real_address0;
    sc_signal< sc_logic > dft2_U0_dft_real_ce0;
    sc_signal< sc_logic > dft2_U0_dft_real_we0;
    sc_signal< sc_lv<32> > dft2_U0_dft_real_d0;
    sc_signal< sc_lv<8> > dft2_U0_dft_imag_address0;
    sc_signal< sc_logic > dft2_U0_dft_imag_ce0;
    sc_signal< sc_logic > dft2_U0_dft_imag_we0;
    sc_signal< sc_lv<32> > dft2_U0_dft_imag_d0;
    sc_signal< sc_logic > ap_channel_done_Stage2_imag;
    sc_signal< sc_logic > dft2_U0_dft_imag_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_Stage2_imag;
    sc_signal< sc_logic > ap_sync_channel_write_Stage2_imag;
    sc_signal< sc_logic > ap_channel_done_Stage2_real;
    sc_signal< sc_logic > dft2_U0_dft_real_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_Stage2_real;
    sc_signal< sc_logic > ap_sync_channel_write_Stage2_real;
    sc_signal< sc_logic > dft3_U0_ap_start;
    sc_signal< sc_logic > dft3_U0_ap_done;
    sc_signal< sc_logic > dft3_U0_ap_continue;
    sc_signal< sc_logic > dft3_U0_ap_idle;
    sc_signal< sc_logic > dft3_U0_ap_ready;
    sc_signal< sc_lv<8> > dft3_U0_real_sample_address0;
    sc_signal< sc_logic > dft3_U0_real_sample_ce0;
    sc_signal< sc_lv<8> > dft3_U0_imag_sample_address0;
    sc_signal< sc_logic > dft3_U0_imag_sample_ce0;
    sc_signal< sc_lv<8> > dft3_U0_dft_real_address0;
    sc_signal< sc_logic > dft3_U0_dft_real_ce0;
    sc_signal< sc_logic > dft3_U0_dft_real_we0;
    sc_signal< sc_lv<32> > dft3_U0_dft_real_d0;
    sc_signal< sc_lv<8> > dft3_U0_dft_imag_address0;
    sc_signal< sc_logic > dft3_U0_dft_imag_ce0;
    sc_signal< sc_logic > dft3_U0_dft_imag_we0;
    sc_signal< sc_lv<32> > dft3_U0_dft_imag_d0;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > Stage1_real_i_full_n;
    sc_signal< sc_logic > Stage1_real_t_empty_n;
    sc_signal< sc_logic > Stage1_imag_i_full_n;
    sc_signal< sc_logic > Stage1_imag_t_empty_n;
    sc_signal< sc_logic > Stage2_real_i_full_n;
    sc_signal< sc_logic > Stage2_real_t_empty_n;
    sc_signal< sc_logic > Stage2_imag_i_full_n;
    sc_signal< sc_logic > Stage2_imag_t_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > dft1_U0_start_full_n;
    sc_signal< sc_logic > dft1_U0_start_write;
    sc_signal< sc_logic > dft2_U0_start_full_n;
    sc_signal< sc_logic > dft2_U0_start_write;
    sc_signal< sc_logic > dft3_U0_start_full_n;
    sc_signal< sc_logic > dft3_U0_start_write;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_channel_done_Stage1_imag();
    void thread_ap_channel_done_Stage1_real();
    void thread_ap_channel_done_Stage2_imag();
    void thread_ap_channel_done_Stage2_real();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_channel_write_Stage1_imag();
    void thread_ap_sync_channel_write_Stage1_real();
    void thread_ap_sync_channel_write_Stage2_imag();
    void thread_ap_sync_channel_write_Stage2_real();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_dft1_U0_ap_continue();
    void thread_dft1_U0_ap_start();
    void thread_dft1_U0_dft_imag_full_n();
    void thread_dft1_U0_dft_real_full_n();
    void thread_dft1_U0_start_full_n();
    void thread_dft1_U0_start_write();
    void thread_dft2_U0_ap_continue();
    void thread_dft2_U0_ap_start();
    void thread_dft2_U0_dft_imag_full_n();
    void thread_dft2_U0_dft_real_full_n();
    void thread_dft2_U0_start_full_n();
    void thread_dft2_U0_start_write();
    void thread_dft3_U0_ap_continue();
    void thread_dft3_U0_ap_start();
    void thread_dft3_U0_start_full_n();
    void thread_dft3_U0_start_write();
    void thread_dft_imag_address0();
    void thread_dft_imag_address1();
    void thread_dft_imag_ce0();
    void thread_dft_imag_ce1();
    void thread_dft_imag_d0();
    void thread_dft_imag_d1();
    void thread_dft_imag_we0();
    void thread_dft_imag_we1();
    void thread_dft_real_address0();
    void thread_dft_real_address1();
    void thread_dft_real_ce0();
    void thread_dft_real_ce1();
    void thread_dft_real_d0();
    void thread_dft_real_d1();
    void thread_dft_real_we0();
    void thread_dft_real_we1();
    void thread_imag_sample_address0();
    void thread_imag_sample_address1();
    void thread_imag_sample_ce0();
    void thread_imag_sample_ce1();
    void thread_imag_sample_d0();
    void thread_imag_sample_d1();
    void thread_imag_sample_we0();
    void thread_imag_sample_we1();
    void thread_real_sample_address0();
    void thread_real_sample_address1();
    void thread_real_sample_ce0();
    void thread_real_sample_ce1();
    void thread_real_sample_d0();
    void thread_real_sample_d1();
    void thread_real_sample_we0();
    void thread_real_sample_we1();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
