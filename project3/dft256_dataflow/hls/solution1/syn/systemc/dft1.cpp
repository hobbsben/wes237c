// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dft1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dft1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dft1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<19> dft1::ap_ST_fsm_state1 = "1";
const sc_lv<19> dft1::ap_ST_fsm_state2 = "10";
const sc_lv<19> dft1::ap_ST_fsm_state3 = "100";
const sc_lv<19> dft1::ap_ST_fsm_state4 = "1000";
const sc_lv<19> dft1::ap_ST_fsm_state5 = "10000";
const sc_lv<19> dft1::ap_ST_fsm_state6 = "100000";
const sc_lv<19> dft1::ap_ST_fsm_state7 = "1000000";
const sc_lv<19> dft1::ap_ST_fsm_state8 = "10000000";
const sc_lv<19> dft1::ap_ST_fsm_state9 = "100000000";
const sc_lv<19> dft1::ap_ST_fsm_state10 = "1000000000";
const sc_lv<19> dft1::ap_ST_fsm_state11 = "10000000000";
const sc_lv<19> dft1::ap_ST_fsm_state12 = "100000000000";
const sc_lv<19> dft1::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<19> dft1::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<19> dft1::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<19> dft1::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<19> dft1::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<19> dft1::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<19> dft1::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<32> dft1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> dft1::ap_const_lv32_C = "1100";
const sc_lv<32> dft1::ap_const_lv32_11 = "10001";
const sc_lv<32> dft1::ap_const_lv32_1 = "1";
const sc_lv<1> dft1::ap_const_lv1_0 = "0";
const sc_lv<32> dft1::ap_const_lv32_2 = "10";
const sc_lv<32> dft1::ap_const_lv32_3 = "11";
const sc_lv<32> dft1::ap_const_lv32_7 = "111";
const sc_lv<8> dft1::ap_const_lv8_0 = "00000000";
const sc_lv<1> dft1::ap_const_lv1_1 = "1";
const sc_lv<9> dft1::ap_const_lv9_0 = "000000000";
const sc_lv<32> dft1::ap_const_lv32_12 = "10010";
const sc_lv<32> dft1::ap_const_lv32_B = "1011";
const sc_lv<32> dft1::ap_const_lv32_8 = "1000";
const sc_lv<32> dft1::ap_const_lv32_D = "1101";
const sc_lv<32> dft1::ap_const_lv32_4 = "100";
const sc_lv<8> dft1::ap_const_lv8_80 = "10000000";
const sc_lv<8> dft1::ap_const_lv8_1 = "1";
const sc_lv<9> dft1::ap_const_lv9_100 = "100000000";
const sc_lv<9> dft1::ap_const_lv9_1 = "1";
const sc_lv<2> dft1::ap_const_lv2_0 = "00";
const sc_lv<2> dft1::ap_const_lv2_1 = "1";
const bool dft1::ap_const_boolean_1 = true;

dft1::dft1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cos_coefficients_tab_1_U = new dft1_cos_coefficibkb("cos_coefficients_tab_1_U");
    cos_coefficients_tab_1_U->clk(ap_clk);
    cos_coefficients_tab_1_U->reset(ap_rst);
    cos_coefficients_tab_1_U->address0(cos_coefficients_tab_1_address0);
    cos_coefficients_tab_1_U->ce0(cos_coefficients_tab_1_ce0);
    cos_coefficients_tab_1_U->q0(cos_coefficients_tab_1_q0);
    sin_coefficients_tab_1_U = new dft1_sin_coefficicud("sin_coefficients_tab_1_U");
    sin_coefficients_tab_1_U->clk(ap_clk);
    sin_coefficients_tab_1_U->reset(ap_rst);
    sin_coefficients_tab_1_U->address0(sin_coefficients_tab_1_address0);
    sin_coefficients_tab_1_U->ce0(sin_coefficients_tab_1_ce0);
    sin_coefficients_tab_1_U->q0(sin_coefficients_tab_1_q0);
    top_faddfsub_32nsdEe_U0 = new top_faddfsub_32nsdEe<1,5,32,32,32>("top_faddfsub_32nsdEe_U0");
    top_faddfsub_32nsdEe_U0->clk(ap_clk);
    top_faddfsub_32nsdEe_U0->reset(ap_rst);
    top_faddfsub_32nsdEe_U0->din0(grp_fu_133_p0);
    top_faddfsub_32nsdEe_U0->din1(grp_fu_133_p1);
    top_faddfsub_32nsdEe_U0->opcode(grp_fu_133_opcode);
    top_faddfsub_32nsdEe_U0->ce(ap_var_for_const0);
    top_faddfsub_32nsdEe_U0->dout(grp_fu_133_p2);
    top_fadd_32ns_32neOg_U1 = new top_fadd_32ns_32neOg<1,5,32,32,32>("top_fadd_32ns_32neOg_U1");
    top_fadd_32ns_32neOg_U1->clk(ap_clk);
    top_fadd_32ns_32neOg_U1->reset(ap_rst);
    top_fadd_32ns_32neOg_U1->din0(grp_fu_137_p0);
    top_fadd_32ns_32neOg_U1->din1(grp_fu_137_p1);
    top_fadd_32ns_32neOg_U1->ce(ap_var_for_const0);
    top_fadd_32ns_32neOg_U1->dout(grp_fu_137_p2);
    top_fmul_32ns_32nfYi_U2 = new top_fmul_32ns_32nfYi<1,4,32,32,32>("top_fmul_32ns_32nfYi_U2");
    top_fmul_32ns_32nfYi_U2->clk(ap_clk);
    top_fmul_32ns_32nfYi_U2->reset(ap_rst);
    top_fmul_32ns_32nfYi_U2->din0(cos_coefficients_tab_3_reg_267);
    top_fmul_32ns_32nfYi_U2->din1(real_sample_load_reg_273);
    top_fmul_32ns_32nfYi_U2->ce(ap_var_for_const0);
    top_fmul_32ns_32nfYi_U2->dout(grp_fu_141_p2);
    top_fmul_32ns_32nfYi_U3 = new top_fmul_32ns_32nfYi<1,4,32,32,32>("top_fmul_32ns_32nfYi_U3");
    top_fmul_32ns_32nfYi_U3->clk(ap_clk);
    top_fmul_32ns_32nfYi_U3->reset(ap_rst);
    top_fmul_32ns_32nfYi_U3->din0(sin_coefficients_tab_3_reg_279);
    top_fmul_32ns_32nfYi_U3->din1(imag_sample_load_reg_285);
    top_fmul_32ns_32nfYi_U3->ce(ap_var_for_const0);
    top_fmul_32ns_32nfYi_U3->dout(grp_fu_145_p2);
    top_fmul_32ns_32nfYi_U4 = new top_fmul_32ns_32nfYi<1,4,32,32,32>("top_fmul_32ns_32nfYi_U4");
    top_fmul_32ns_32nfYi_U4->clk(ap_clk);
    top_fmul_32ns_32nfYi_U4->reset(ap_rst);
    top_fmul_32ns_32nfYi_U4->din0(sin_coefficients_tab_3_reg_279);
    top_fmul_32ns_32nfYi_U4->din1(real_sample_load_reg_273);
    top_fmul_32ns_32nfYi_U4->ce(ap_var_for_const0);
    top_fmul_32ns_32nfYi_U4->dout(grp_fu_149_p2);
    top_fmul_32ns_32nfYi_U5 = new top_fmul_32ns_32nfYi<1,4,32,32,32>("top_fmul_32ns_32nfYi_U5");
    top_fmul_32ns_32nfYi_U5->clk(ap_clk);
    top_fmul_32ns_32nfYi_U5->reset(ap_rst);
    top_fmul_32ns_32nfYi_U5->din0(cos_coefficients_tab_3_reg_267);
    top_fmul_32ns_32nfYi_U5->din1(imag_sample_load_reg_285);
    top_fmul_32ns_32nfYi_U5->ce(ap_var_for_const0);
    top_fmul_32ns_32nfYi_U5->dout(grp_fu_153_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_175_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_175_p2 );

    SC_METHOD(thread_cos_coefficients_tab_1_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ind_cast_fu_215_p1 );

    SC_METHOD(thread_cos_coefficients_tab_1_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dft_imag_address0);
    sensitive << ( dft_imag_addr_reg_262 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_dft_imag_ce0);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_dft_imag_d0);
    sensitive << ( reg_163 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_dft_imag_we0);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_dft_real_address0);
    sensitive << ( dft_real_addr_reg_257 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_dft_real_ce0);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_dft_real_d0);
    sensitive << ( reg_157 );
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_dft_real_we0);
    sensitive << ( ap_CS_fsm_state19 );

    SC_METHOD(thread_exitcond1_fu_175_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( n_reg_110 );

    SC_METHOD(thread_exitcond_fu_197_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( w_reg_122 );

    SC_METHOD(thread_grp_fu_133_opcode);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_133_p0);
    sensitive << ( tmp_s_reg_291 );
    sensitive << ( dft_real_load_reg_311 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_133_p1);
    sensitive << ( reg_157 );
    sensitive << ( tmp_1_reg_296 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_137_p0);
    sensitive << ( tmp_4_reg_301 );
    sensitive << ( dft_imag_load_reg_316 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_137_p1);
    sensitive << ( reg_163 );
    sensitive << ( tmp_5_reg_306 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_imag_sample_address0);
    sensitive << ( imag_sample_addr_reg_234 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_imag_sample_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ind_cast_fu_215_p1);
    sensitive << ( ind_fu_209_p2 );

    SC_METHOD(thread_ind_fu_209_p2);
    sensitive << ( n_reg_110 );
    sensitive << ( tmp_fu_193_p1 );

    SC_METHOD(thread_n_2_fu_181_p2);
    sensitive << ( n_reg_110 );

    SC_METHOD(thread_n_cast_fu_169_p1);
    sensitive << ( n_reg_110 );

    SC_METHOD(thread_real_sample_address0);
    sensitive << ( real_sample_addr_reg_229 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_real_sample_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sin_coefficients_tab_1_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ind_cast_fu_215_p1 );

    SC_METHOD(thread_sin_coefficients_tab_1_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_fu_193_p1);
    sensitive << ( w_reg_122 );

    SC_METHOD(thread_w_3_fu_203_p2);
    sensitive << ( w_reg_122 );

    SC_METHOD(thread_w_cast2_fu_187_p1);
    sensitive << ( w_reg_122 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_175_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_197_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dft1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, real_sample_address0, "(port)real_sample_address0");
    sc_trace(mVcdFile, real_sample_ce0, "(port)real_sample_ce0");
    sc_trace(mVcdFile, real_sample_q0, "(port)real_sample_q0");
    sc_trace(mVcdFile, imag_sample_address0, "(port)imag_sample_address0");
    sc_trace(mVcdFile, imag_sample_ce0, "(port)imag_sample_ce0");
    sc_trace(mVcdFile, imag_sample_q0, "(port)imag_sample_q0");
    sc_trace(mVcdFile, dft_real_address0, "(port)dft_real_address0");
    sc_trace(mVcdFile, dft_real_ce0, "(port)dft_real_ce0");
    sc_trace(mVcdFile, dft_real_we0, "(port)dft_real_we0");
    sc_trace(mVcdFile, dft_real_d0, "(port)dft_real_d0");
    sc_trace(mVcdFile, dft_real_q0, "(port)dft_real_q0");
    sc_trace(mVcdFile, dft_imag_address0, "(port)dft_imag_address0");
    sc_trace(mVcdFile, dft_imag_ce0, "(port)dft_imag_ce0");
    sc_trace(mVcdFile, dft_imag_we0, "(port)dft_imag_we0");
    sc_trace(mVcdFile, dft_imag_d0, "(port)dft_imag_d0");
    sc_trace(mVcdFile, dft_imag_q0, "(port)dft_imag_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, cos_coefficients_tab_1_address0, "cos_coefficients_tab_1_address0");
    sc_trace(mVcdFile, cos_coefficients_tab_1_ce0, "cos_coefficients_tab_1_ce0");
    sc_trace(mVcdFile, cos_coefficients_tab_1_q0, "cos_coefficients_tab_1_q0");
    sc_trace(mVcdFile, sin_coefficients_tab_1_address0, "sin_coefficients_tab_1_address0");
    sc_trace(mVcdFile, sin_coefficients_tab_1_ce0, "sin_coefficients_tab_1_ce0");
    sc_trace(mVcdFile, sin_coefficients_tab_1_q0, "sin_coefficients_tab_1_q0");
    sc_trace(mVcdFile, grp_fu_133_p2, "grp_fu_133_p2");
    sc_trace(mVcdFile, reg_157, "reg_157");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, grp_fu_137_p2, "grp_fu_137_p2");
    sc_trace(mVcdFile, reg_163, "reg_163");
    sc_trace(mVcdFile, n_2_fu_181_p2, "n_2_fu_181_p2");
    sc_trace(mVcdFile, n_2_reg_224, "n_2_reg_224");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, real_sample_addr_reg_229, "real_sample_addr_reg_229");
    sc_trace(mVcdFile, exitcond1_fu_175_p2, "exitcond1_fu_175_p2");
    sc_trace(mVcdFile, imag_sample_addr_reg_234, "imag_sample_addr_reg_234");
    sc_trace(mVcdFile, w_3_fu_203_p2, "w_3_fu_203_p2");
    sc_trace(mVcdFile, w_3_reg_242, "w_3_reg_242");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_197_p2, "exitcond_fu_197_p2");
    sc_trace(mVcdFile, dft_real_addr_reg_257, "dft_real_addr_reg_257");
    sc_trace(mVcdFile, dft_imag_addr_reg_262, "dft_imag_addr_reg_262");
    sc_trace(mVcdFile, cos_coefficients_tab_3_reg_267, "cos_coefficients_tab_3_reg_267");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, real_sample_load_reg_273, "real_sample_load_reg_273");
    sc_trace(mVcdFile, sin_coefficients_tab_3_reg_279, "sin_coefficients_tab_3_reg_279");
    sc_trace(mVcdFile, imag_sample_load_reg_285, "imag_sample_load_reg_285");
    sc_trace(mVcdFile, grp_fu_141_p2, "grp_fu_141_p2");
    sc_trace(mVcdFile, tmp_s_reg_291, "tmp_s_reg_291");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_145_p2, "grp_fu_145_p2");
    sc_trace(mVcdFile, tmp_1_reg_296, "tmp_1_reg_296");
    sc_trace(mVcdFile, grp_fu_149_p2, "grp_fu_149_p2");
    sc_trace(mVcdFile, tmp_4_reg_301, "tmp_4_reg_301");
    sc_trace(mVcdFile, grp_fu_153_p2, "grp_fu_153_p2");
    sc_trace(mVcdFile, tmp_5_reg_306, "tmp_5_reg_306");
    sc_trace(mVcdFile, dft_real_load_reg_311, "dft_real_load_reg_311");
    sc_trace(mVcdFile, dft_imag_load_reg_316, "dft_imag_load_reg_316");
    sc_trace(mVcdFile, n_reg_110, "n_reg_110");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, w_reg_122, "w_reg_122");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, n_cast_fu_169_p1, "n_cast_fu_169_p1");
    sc_trace(mVcdFile, ind_cast_fu_215_p1, "ind_cast_fu_215_p1");
    sc_trace(mVcdFile, w_cast2_fu_187_p1, "w_cast2_fu_187_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_fu_133_p0, "grp_fu_133_p0");
    sc_trace(mVcdFile, grp_fu_133_p1, "grp_fu_133_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, grp_fu_137_p0, "grp_fu_137_p0");
    sc_trace(mVcdFile, grp_fu_137_p1, "grp_fu_137_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_fu_193_p1, "tmp_fu_193_p1");
    sc_trace(mVcdFile, ind_fu_209_p2, "ind_fu_209_p2");
    sc_trace(mVcdFile, grp_fu_133_opcode, "grp_fu_133_opcode");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

dft1::~dft1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete cos_coefficients_tab_1_U;
    delete sin_coefficients_tab_1_U;
    delete top_faddfsub_32nsdEe_U0;
    delete top_fadd_32ns_32neOg_U1;
    delete top_fmul_32ns_32nfYi_U2;
    delete top_fmul_32ns_32nfYi_U3;
    delete top_fmul_32ns_32nfYi_U4;
    delete top_fmul_32ns_32nfYi_U5;
}

void dft1::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void dft1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(exitcond1_fu_175_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_197_p2.read(), ap_const_lv1_1))) {
        n_reg_110 = n_2_reg_224.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        n_reg_110 = ap_const_lv8_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        w_reg_122 = w_3_reg_242.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_175_p2.read(), ap_const_lv1_0))) {
        w_reg_122 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        cos_coefficients_tab_3_reg_267 = cos_coefficients_tab_1_q0.read();
        imag_sample_load_reg_285 = imag_sample_q0.read();
        real_sample_load_reg_273 = real_sample_q0.read();
        sin_coefficients_tab_3_reg_279 = sin_coefficients_tab_1_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_197_p2.read()))) {
        dft_imag_addr_reg_262 =  (sc_lv<8>) (w_cast2_fu_187_p1.read());
        dft_real_addr_reg_257 =  (sc_lv<8>) (w_cast2_fu_187_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        dft_imag_load_reg_316 = dft_imag_q0.read();
        dft_real_load_reg_311 = dft_real_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_175_p2.read(), ap_const_lv1_0))) {
        imag_sample_addr_reg_234 =  (sc_lv<8>) (n_cast_fu_169_p1.read());
        real_sample_addr_reg_229 =  (sc_lv<8>) (n_cast_fu_169_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        n_2_reg_224 = n_2_fu_181_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        reg_157 = grp_fu_133_p2.read();
        reg_163 = grp_fu_137_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_1_reg_296 = grp_fu_145_p2.read();
        tmp_4_reg_301 = grp_fu_149_p2.read();
        tmp_5_reg_306 = grp_fu_153_p2.read();
        tmp_s_reg_291 = grp_fu_141_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        w_3_reg_242 = w_3_fu_203_p2.read();
    }
}

void dft1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void dft1::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void dft1::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void dft1::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void dft1::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void dft1::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void dft1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void dft1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void dft1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void dft1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void dft1::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void dft1::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void dft1::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void dft1::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_175_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void dft1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dft1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_175_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dft1::thread_cos_coefficients_tab_1_address0() {
    cos_coefficients_tab_1_address0 =  (sc_lv<8>) (ind_cast_fu_215_p1.read());
}

void dft1::thread_cos_coefficients_tab_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        cos_coefficients_tab_1_ce0 = ap_const_logic_1;
    } else {
        cos_coefficients_tab_1_ce0 = ap_const_logic_0;
    }
}

void dft1::thread_dft_imag_address0() {
    dft_imag_address0 = dft_imag_addr_reg_262.read();
}

void dft1::thread_dft_imag_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        dft_imag_ce0 = ap_const_logic_1;
    } else {
        dft_imag_ce0 = ap_const_logic_0;
    }
}

void dft1::thread_dft_imag_d0() {
    dft_imag_d0 = reg_163.read();
}

void dft1::thread_dft_imag_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        dft_imag_we0 = ap_const_logic_1;
    } else {
        dft_imag_we0 = ap_const_logic_0;
    }
}

void dft1::thread_dft_real_address0() {
    dft_real_address0 = dft_real_addr_reg_257.read();
}

void dft1::thread_dft_real_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        dft_real_ce0 = ap_const_logic_1;
    } else {
        dft_real_ce0 = ap_const_logic_0;
    }
}

void dft1::thread_dft_real_d0() {
    dft_real_d0 = reg_157.read();
}

void dft1::thread_dft_real_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        dft_real_we0 = ap_const_logic_1;
    } else {
        dft_real_we0 = ap_const_logic_0;
    }
}

void dft1::thread_exitcond1_fu_175_p2() {
    exitcond1_fu_175_p2 = (!n_reg_110.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(n_reg_110.read() == ap_const_lv8_80);
}

void dft1::thread_exitcond_fu_197_p2() {
    exitcond_fu_197_p2 = (!w_reg_122.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(w_reg_122.read() == ap_const_lv9_100);
}

void dft1::thread_grp_fu_133_opcode() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_133_opcode = ap_const_lv2_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_133_opcode = ap_const_lv2_0;
    } else {
        grp_fu_133_opcode = "XX";
    }
}

void dft1::thread_grp_fu_133_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_133_p0 = dft_real_load_reg_311.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_133_p0 = tmp_s_reg_291.read();
    } else {
        grp_fu_133_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void dft1::thread_grp_fu_133_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_133_p1 = reg_157.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_133_p1 = tmp_1_reg_296.read();
    } else {
        grp_fu_133_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void dft1::thread_grp_fu_137_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_137_p0 = dft_imag_load_reg_316.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_137_p0 = tmp_4_reg_301.read();
    } else {
        grp_fu_137_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void dft1::thread_grp_fu_137_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        grp_fu_137_p1 = reg_163.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        grp_fu_137_p1 = tmp_5_reg_306.read();
    } else {
        grp_fu_137_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void dft1::thread_imag_sample_address0() {
    imag_sample_address0 = imag_sample_addr_reg_234.read();
}

void dft1::thread_imag_sample_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        imag_sample_ce0 = ap_const_logic_1;
    } else {
        imag_sample_ce0 = ap_const_logic_0;
    }
}

void dft1::thread_ind_cast_fu_215_p1() {
    ind_cast_fu_215_p1 = esl_zext<32,8>(ind_fu_209_p2.read());
}

void dft1::thread_ind_fu_209_p2() {
    ind_fu_209_p2 = (!n_reg_110.read().is_01() || !tmp_fu_193_p1.read().is_01())? sc_lv<8>(): sc_bigint<8>(n_reg_110.read()) * sc_bigint<8>(tmp_fu_193_p1.read());
}

void dft1::thread_n_2_fu_181_p2() {
    n_2_fu_181_p2 = (!n_reg_110.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_bigint<8>(n_reg_110.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void dft1::thread_n_cast_fu_169_p1() {
    n_cast_fu_169_p1 = esl_zext<32,8>(n_reg_110.read());
}

void dft1::thread_real_sample_address0() {
    real_sample_address0 = real_sample_addr_reg_229.read();
}

void dft1::thread_real_sample_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        real_sample_ce0 = ap_const_logic_1;
    } else {
        real_sample_ce0 = ap_const_logic_0;
    }
}

void dft1::thread_sin_coefficients_tab_1_address0() {
    sin_coefficients_tab_1_address0 =  (sc_lv<8>) (ind_cast_fu_215_p1.read());
}

void dft1::thread_sin_coefficients_tab_1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sin_coefficients_tab_1_ce0 = ap_const_logic_1;
    } else {
        sin_coefficients_tab_1_ce0 = ap_const_logic_0;
    }
}

void dft1::thread_tmp_fu_193_p1() {
    tmp_fu_193_p1 = w_reg_122.read().range(8-1, 0);
}

void dft1::thread_w_3_fu_203_p2() {
    w_3_fu_203_p2 = (!ap_const_lv9_1.is_01() || !w_reg_122.read().is_01())? sc_lv<9>(): (sc_biguint<9>(ap_const_lv9_1) + sc_biguint<9>(w_reg_122.read()));
}

void dft1::thread_w_cast2_fu_187_p1() {
    w_cast2_fu_187_p1 = esl_zext<32,9>(w_reg_122.read());
}

void dft1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond1_fu_175_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond_fu_197_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<19>) ("XXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

