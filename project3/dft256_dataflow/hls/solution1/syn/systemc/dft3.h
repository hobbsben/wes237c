// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dft3_HH_
#define _dft3_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct dft3 : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > real_sample_address0;
    sc_out< sc_logic > real_sample_ce0;
    sc_in< sc_lv<32> > real_sample_q0;
    sc_out< sc_lv<8> > imag_sample_address0;
    sc_out< sc_logic > imag_sample_ce0;
    sc_in< sc_lv<32> > imag_sample_q0;
    sc_out< sc_lv<8> > dft_real_address0;
    sc_out< sc_logic > dft_real_ce0;
    sc_out< sc_logic > dft_real_we0;
    sc_out< sc_lv<32> > dft_real_d0;
    sc_out< sc_lv<8> > dft_imag_address0;
    sc_out< sc_logic > dft_imag_ce0;
    sc_out< sc_logic > dft_imag_we0;
    sc_out< sc_lv<32> > dft_imag_d0;


    // Module declarations
    dft3(sc_module_name name);
    SC_HAS_PROCESS(dft3);

    ~dft3();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > w_cast_fu_85_p1;
    sc_signal< sc_lv<32> > w_cast_reg_103;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<9> > w_1_fu_97_p2;
    sc_signal< sc_lv<9> > w_1_reg_112;
    sc_signal< sc_lv<1> > exitcond_fu_91_p2;
    sc_signal< sc_lv<9> > w_reg_74;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_dft_imag_address0();
    void thread_dft_imag_ce0();
    void thread_dft_imag_d0();
    void thread_dft_imag_we0();
    void thread_dft_real_address0();
    void thread_dft_real_ce0();
    void thread_dft_real_d0();
    void thread_dft_real_we0();
    void thread_exitcond_fu_91_p2();
    void thread_imag_sample_address0();
    void thread_imag_sample_ce0();
    void thread_real_sample_address0();
    void thread_real_sample_ce0();
    void thread_w_1_fu_97_p2();
    void thread_w_cast_fu_85_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
