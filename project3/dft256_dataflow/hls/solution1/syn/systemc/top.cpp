// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic top::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<8> top::ap_const_lv8_0 = "00000000";
const sc_logic top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> top::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool top::ap_const_boolean_1 = true;

top::top(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Stage1_real_U = new top_Stage1_real("Stage1_real_U");
    Stage1_real_U->clk(ap_clk);
    Stage1_real_U->reset(ap_rst);
    Stage1_real_U->i_address0(dft1_U0_dft_real_address0);
    Stage1_real_U->i_ce0(dft1_U0_dft_real_ce0);
    Stage1_real_U->i_we0(dft1_U0_dft_real_we0);
    Stage1_real_U->i_d0(dft1_U0_dft_real_d0);
    Stage1_real_U->i_q0(Stage1_real_i_q0);
    Stage1_real_U->t_address0(dft2_U0_real_sample_address0);
    Stage1_real_U->t_ce0(dft2_U0_real_sample_ce0);
    Stage1_real_U->t_we0(ap_var_for_const0);
    Stage1_real_U->t_d0(ap_var_for_const1);
    Stage1_real_U->t_q0(Stage1_real_t_q0);
    Stage1_real_U->i_ce(ap_var_for_const2);
    Stage1_real_U->t_ce(ap_var_for_const2);
    Stage1_real_U->i_full_n(Stage1_real_i_full_n);
    Stage1_real_U->i_write(ap_channel_done_Stage1_real);
    Stage1_real_U->t_empty_n(Stage1_real_t_empty_n);
    Stage1_real_U->t_read(dft2_U0_ap_ready);
    Stage1_imag_U = new top_Stage1_real("Stage1_imag_U");
    Stage1_imag_U->clk(ap_clk);
    Stage1_imag_U->reset(ap_rst);
    Stage1_imag_U->i_address0(dft1_U0_dft_imag_address0);
    Stage1_imag_U->i_ce0(dft1_U0_dft_imag_ce0);
    Stage1_imag_U->i_we0(dft1_U0_dft_imag_we0);
    Stage1_imag_U->i_d0(dft1_U0_dft_imag_d0);
    Stage1_imag_U->i_q0(Stage1_imag_i_q0);
    Stage1_imag_U->t_address0(dft2_U0_imag_sample_address0);
    Stage1_imag_U->t_ce0(dft2_U0_imag_sample_ce0);
    Stage1_imag_U->t_we0(ap_var_for_const0);
    Stage1_imag_U->t_d0(ap_var_for_const1);
    Stage1_imag_U->t_q0(Stage1_imag_t_q0);
    Stage1_imag_U->i_ce(ap_var_for_const2);
    Stage1_imag_U->t_ce(ap_var_for_const2);
    Stage1_imag_U->i_full_n(Stage1_imag_i_full_n);
    Stage1_imag_U->i_write(ap_channel_done_Stage1_imag);
    Stage1_imag_U->t_empty_n(Stage1_imag_t_empty_n);
    Stage1_imag_U->t_read(dft2_U0_ap_ready);
    Stage2_real_U = new top_Stage1_real("Stage2_real_U");
    Stage2_real_U->clk(ap_clk);
    Stage2_real_U->reset(ap_rst);
    Stage2_real_U->i_address0(dft2_U0_dft_real_address0);
    Stage2_real_U->i_ce0(dft2_U0_dft_real_ce0);
    Stage2_real_U->i_we0(dft2_U0_dft_real_we0);
    Stage2_real_U->i_d0(dft2_U0_dft_real_d0);
    Stage2_real_U->i_q0(Stage2_real_i_q0);
    Stage2_real_U->t_address0(dft3_U0_real_sample_address0);
    Stage2_real_U->t_ce0(dft3_U0_real_sample_ce0);
    Stage2_real_U->t_we0(ap_var_for_const0);
    Stage2_real_U->t_d0(ap_var_for_const1);
    Stage2_real_U->t_q0(Stage2_real_t_q0);
    Stage2_real_U->i_ce(ap_var_for_const2);
    Stage2_real_U->t_ce(ap_var_for_const2);
    Stage2_real_U->i_full_n(Stage2_real_i_full_n);
    Stage2_real_U->i_write(ap_channel_done_Stage2_real);
    Stage2_real_U->t_empty_n(Stage2_real_t_empty_n);
    Stage2_real_U->t_read(dft3_U0_ap_ready);
    Stage2_imag_U = new top_Stage1_real("Stage2_imag_U");
    Stage2_imag_U->clk(ap_clk);
    Stage2_imag_U->reset(ap_rst);
    Stage2_imag_U->i_address0(dft2_U0_dft_imag_address0);
    Stage2_imag_U->i_ce0(dft2_U0_dft_imag_ce0);
    Stage2_imag_U->i_we0(dft2_U0_dft_imag_we0);
    Stage2_imag_U->i_d0(dft2_U0_dft_imag_d0);
    Stage2_imag_U->i_q0(Stage2_imag_i_q0);
    Stage2_imag_U->t_address0(dft3_U0_imag_sample_address0);
    Stage2_imag_U->t_ce0(dft3_U0_imag_sample_ce0);
    Stage2_imag_U->t_we0(ap_var_for_const0);
    Stage2_imag_U->t_d0(ap_var_for_const1);
    Stage2_imag_U->t_q0(Stage2_imag_t_q0);
    Stage2_imag_U->i_ce(ap_var_for_const2);
    Stage2_imag_U->t_ce(ap_var_for_const2);
    Stage2_imag_U->i_full_n(Stage2_imag_i_full_n);
    Stage2_imag_U->i_write(ap_channel_done_Stage2_imag);
    Stage2_imag_U->t_empty_n(Stage2_imag_t_empty_n);
    Stage2_imag_U->t_read(dft3_U0_ap_ready);
    dft1_U0 = new dft1("dft1_U0");
    dft1_U0->ap_clk(ap_clk);
    dft1_U0->ap_rst(ap_rst);
    dft1_U0->ap_start(dft1_U0_ap_start);
    dft1_U0->ap_done(dft1_U0_ap_done);
    dft1_U0->ap_continue(dft1_U0_ap_continue);
    dft1_U0->ap_idle(dft1_U0_ap_idle);
    dft1_U0->ap_ready(dft1_U0_ap_ready);
    dft1_U0->real_sample_address0(dft1_U0_real_sample_address0);
    dft1_U0->real_sample_ce0(dft1_U0_real_sample_ce0);
    dft1_U0->real_sample_q0(real_sample_q0);
    dft1_U0->imag_sample_address0(dft1_U0_imag_sample_address0);
    dft1_U0->imag_sample_ce0(dft1_U0_imag_sample_ce0);
    dft1_U0->imag_sample_q0(imag_sample_q0);
    dft1_U0->dft_real_address0(dft1_U0_dft_real_address0);
    dft1_U0->dft_real_ce0(dft1_U0_dft_real_ce0);
    dft1_U0->dft_real_we0(dft1_U0_dft_real_we0);
    dft1_U0->dft_real_d0(dft1_U0_dft_real_d0);
    dft1_U0->dft_real_q0(Stage1_real_i_q0);
    dft1_U0->dft_imag_address0(dft1_U0_dft_imag_address0);
    dft1_U0->dft_imag_ce0(dft1_U0_dft_imag_ce0);
    dft1_U0->dft_imag_we0(dft1_U0_dft_imag_we0);
    dft1_U0->dft_imag_d0(dft1_U0_dft_imag_d0);
    dft1_U0->dft_imag_q0(Stage1_imag_i_q0);
    dft2_U0 = new dft2("dft2_U0");
    dft2_U0->ap_clk(ap_clk);
    dft2_U0->ap_rst(ap_rst);
    dft2_U0->ap_start(dft2_U0_ap_start);
    dft2_U0->ap_done(dft2_U0_ap_done);
    dft2_U0->ap_continue(dft2_U0_ap_continue);
    dft2_U0->ap_idle(dft2_U0_ap_idle);
    dft2_U0->ap_ready(dft2_U0_ap_ready);
    dft2_U0->real_sample_address0(dft2_U0_real_sample_address0);
    dft2_U0->real_sample_ce0(dft2_U0_real_sample_ce0);
    dft2_U0->real_sample_q0(Stage1_real_t_q0);
    dft2_U0->imag_sample_address0(dft2_U0_imag_sample_address0);
    dft2_U0->imag_sample_ce0(dft2_U0_imag_sample_ce0);
    dft2_U0->imag_sample_q0(Stage1_imag_t_q0);
    dft2_U0->dft_real_address0(dft2_U0_dft_real_address0);
    dft2_U0->dft_real_ce0(dft2_U0_dft_real_ce0);
    dft2_U0->dft_real_we0(dft2_U0_dft_real_we0);
    dft2_U0->dft_real_d0(dft2_U0_dft_real_d0);
    dft2_U0->dft_real_q0(Stage2_real_i_q0);
    dft2_U0->dft_imag_address0(dft2_U0_dft_imag_address0);
    dft2_U0->dft_imag_ce0(dft2_U0_dft_imag_ce0);
    dft2_U0->dft_imag_we0(dft2_U0_dft_imag_we0);
    dft2_U0->dft_imag_d0(dft2_U0_dft_imag_d0);
    dft2_U0->dft_imag_q0(Stage2_imag_i_q0);
    dft3_U0 = new dft3("dft3_U0");
    dft3_U0->ap_clk(ap_clk);
    dft3_U0->ap_rst(ap_rst);
    dft3_U0->ap_start(dft3_U0_ap_start);
    dft3_U0->ap_done(dft3_U0_ap_done);
    dft3_U0->ap_continue(dft3_U0_ap_continue);
    dft3_U0->ap_idle(dft3_U0_ap_idle);
    dft3_U0->ap_ready(dft3_U0_ap_ready);
    dft3_U0->real_sample_address0(dft3_U0_real_sample_address0);
    dft3_U0->real_sample_ce0(dft3_U0_real_sample_ce0);
    dft3_U0->real_sample_q0(Stage2_real_t_q0);
    dft3_U0->imag_sample_address0(dft3_U0_imag_sample_address0);
    dft3_U0->imag_sample_ce0(dft3_U0_imag_sample_ce0);
    dft3_U0->imag_sample_q0(Stage2_imag_t_q0);
    dft3_U0->dft_real_address0(dft3_U0_dft_real_address0);
    dft3_U0->dft_real_ce0(dft3_U0_dft_real_ce0);
    dft3_U0->dft_real_we0(dft3_U0_dft_real_we0);
    dft3_U0->dft_real_d0(dft3_U0_dft_real_d0);
    dft3_U0->dft_imag_address0(dft3_U0_dft_imag_address0);
    dft3_U0->dft_imag_ce0(dft3_U0_dft_imag_ce0);
    dft3_U0->dft_imag_we0(dft3_U0_dft_imag_we0);
    dft3_U0->dft_imag_d0(dft3_U0_dft_imag_d0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_channel_done_Stage1_imag);
    sensitive << ( dft1_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_Stage1_imag );

    SC_METHOD(thread_ap_channel_done_Stage1_real);
    sensitive << ( dft1_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_Stage1_real );

    SC_METHOD(thread_ap_channel_done_Stage2_imag);
    sensitive << ( dft2_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_Stage2_imag );

    SC_METHOD(thread_ap_channel_done_Stage2_real);
    sensitive << ( dft2_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_Stage2_real );

    SC_METHOD(thread_ap_done);
    sensitive << ( dft3_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( dft1_U0_ap_idle );
    sensitive << ( dft2_U0_ap_idle );
    sensitive << ( dft3_U0_ap_idle );
    sensitive << ( Stage1_real_t_empty_n );
    sensitive << ( Stage1_imag_t_empty_n );
    sensitive << ( Stage2_real_t_empty_n );
    sensitive << ( Stage2_imag_t_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( dft1_U0_ap_ready );

    SC_METHOD(thread_ap_sync_channel_write_Stage1_imag);
    sensitive << ( ap_channel_done_Stage1_imag );
    sensitive << ( dft1_U0_dft_imag_full_n );
    sensitive << ( ap_sync_reg_channel_write_Stage1_imag );

    SC_METHOD(thread_ap_sync_channel_write_Stage1_real);
    sensitive << ( ap_channel_done_Stage1_real );
    sensitive << ( dft1_U0_dft_real_full_n );
    sensitive << ( ap_sync_reg_channel_write_Stage1_real );

    SC_METHOD(thread_ap_sync_channel_write_Stage2_imag);
    sensitive << ( ap_channel_done_Stage2_imag );
    sensitive << ( dft2_U0_dft_imag_full_n );
    sensitive << ( ap_sync_reg_channel_write_Stage2_imag );

    SC_METHOD(thread_ap_sync_channel_write_Stage2_real);
    sensitive << ( ap_channel_done_Stage2_real );
    sensitive << ( dft2_U0_dft_real_full_n );
    sensitive << ( ap_sync_reg_channel_write_Stage2_real );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( dft3_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( dft1_U0_ap_ready );

    SC_METHOD(thread_dft1_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_Stage1_imag );
    sensitive << ( ap_sync_channel_write_Stage1_real );

    SC_METHOD(thread_dft1_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_dft1_U0_dft_imag_full_n);
    sensitive << ( Stage1_imag_i_full_n );

    SC_METHOD(thread_dft1_U0_dft_real_full_n);
    sensitive << ( Stage1_real_i_full_n );

    SC_METHOD(thread_dft1_U0_start_full_n);

    SC_METHOD(thread_dft1_U0_start_write);

    SC_METHOD(thread_dft2_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_Stage2_imag );
    sensitive << ( ap_sync_channel_write_Stage2_real );

    SC_METHOD(thread_dft2_U0_ap_start);
    sensitive << ( Stage1_real_t_empty_n );
    sensitive << ( Stage1_imag_t_empty_n );

    SC_METHOD(thread_dft2_U0_dft_imag_full_n);
    sensitive << ( Stage2_imag_i_full_n );

    SC_METHOD(thread_dft2_U0_dft_real_full_n);
    sensitive << ( Stage2_real_i_full_n );

    SC_METHOD(thread_dft2_U0_start_full_n);

    SC_METHOD(thread_dft2_U0_start_write);

    SC_METHOD(thread_dft3_U0_ap_continue);

    SC_METHOD(thread_dft3_U0_ap_start);
    sensitive << ( Stage2_real_t_empty_n );
    sensitive << ( Stage2_imag_t_empty_n );

    SC_METHOD(thread_dft3_U0_start_full_n);

    SC_METHOD(thread_dft3_U0_start_write);

    SC_METHOD(thread_dft_imag_address0);
    sensitive << ( dft3_U0_dft_imag_address0 );

    SC_METHOD(thread_dft_imag_address1);

    SC_METHOD(thread_dft_imag_ce0);
    sensitive << ( dft3_U0_dft_imag_ce0 );

    SC_METHOD(thread_dft_imag_ce1);

    SC_METHOD(thread_dft_imag_d0);
    sensitive << ( dft3_U0_dft_imag_d0 );

    SC_METHOD(thread_dft_imag_d1);

    SC_METHOD(thread_dft_imag_we0);
    sensitive << ( dft3_U0_dft_imag_we0 );

    SC_METHOD(thread_dft_imag_we1);

    SC_METHOD(thread_dft_real_address0);
    sensitive << ( dft3_U0_dft_real_address0 );

    SC_METHOD(thread_dft_real_address1);

    SC_METHOD(thread_dft_real_ce0);
    sensitive << ( dft3_U0_dft_real_ce0 );

    SC_METHOD(thread_dft_real_ce1);

    SC_METHOD(thread_dft_real_d0);
    sensitive << ( dft3_U0_dft_real_d0 );

    SC_METHOD(thread_dft_real_d1);

    SC_METHOD(thread_dft_real_we0);
    sensitive << ( dft3_U0_dft_real_we0 );

    SC_METHOD(thread_dft_real_we1);

    SC_METHOD(thread_imag_sample_address0);
    sensitive << ( dft1_U0_imag_sample_address0 );

    SC_METHOD(thread_imag_sample_address1);

    SC_METHOD(thread_imag_sample_ce0);
    sensitive << ( dft1_U0_imag_sample_ce0 );

    SC_METHOD(thread_imag_sample_ce1);

    SC_METHOD(thread_imag_sample_d0);

    SC_METHOD(thread_imag_sample_d1);

    SC_METHOD(thread_imag_sample_we0);

    SC_METHOD(thread_imag_sample_we1);

    SC_METHOD(thread_real_sample_address0);
    sensitive << ( dft1_U0_real_sample_address0 );

    SC_METHOD(thread_real_sample_address1);

    SC_METHOD(thread_real_sample_ce0);
    sensitive << ( dft1_U0_real_sample_ce0 );

    SC_METHOD(thread_real_sample_ce1);

    SC_METHOD(thread_real_sample_d0);

    SC_METHOD(thread_real_sample_d1);

    SC_METHOD(thread_real_sample_we0);

    SC_METHOD(thread_real_sample_we1);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_sync_reg_channel_write_Stage1_imag = SC_LOGIC_0;
    ap_sync_reg_channel_write_Stage1_real = SC_LOGIC_0;
    ap_sync_reg_channel_write_Stage2_imag = SC_LOGIC_0;
    ap_sync_reg_channel_write_Stage2_real = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, real_sample_address0, "(port)real_sample_address0");
    sc_trace(mVcdFile, real_sample_ce0, "(port)real_sample_ce0");
    sc_trace(mVcdFile, real_sample_d0, "(port)real_sample_d0");
    sc_trace(mVcdFile, real_sample_q0, "(port)real_sample_q0");
    sc_trace(mVcdFile, real_sample_we0, "(port)real_sample_we0");
    sc_trace(mVcdFile, real_sample_address1, "(port)real_sample_address1");
    sc_trace(mVcdFile, real_sample_ce1, "(port)real_sample_ce1");
    sc_trace(mVcdFile, real_sample_d1, "(port)real_sample_d1");
    sc_trace(mVcdFile, real_sample_q1, "(port)real_sample_q1");
    sc_trace(mVcdFile, real_sample_we1, "(port)real_sample_we1");
    sc_trace(mVcdFile, imag_sample_address0, "(port)imag_sample_address0");
    sc_trace(mVcdFile, imag_sample_ce0, "(port)imag_sample_ce0");
    sc_trace(mVcdFile, imag_sample_d0, "(port)imag_sample_d0");
    sc_trace(mVcdFile, imag_sample_q0, "(port)imag_sample_q0");
    sc_trace(mVcdFile, imag_sample_we0, "(port)imag_sample_we0");
    sc_trace(mVcdFile, imag_sample_address1, "(port)imag_sample_address1");
    sc_trace(mVcdFile, imag_sample_ce1, "(port)imag_sample_ce1");
    sc_trace(mVcdFile, imag_sample_d1, "(port)imag_sample_d1");
    sc_trace(mVcdFile, imag_sample_q1, "(port)imag_sample_q1");
    sc_trace(mVcdFile, imag_sample_we1, "(port)imag_sample_we1");
    sc_trace(mVcdFile, dft_real_address0, "(port)dft_real_address0");
    sc_trace(mVcdFile, dft_real_ce0, "(port)dft_real_ce0");
    sc_trace(mVcdFile, dft_real_d0, "(port)dft_real_d0");
    sc_trace(mVcdFile, dft_real_q0, "(port)dft_real_q0");
    sc_trace(mVcdFile, dft_real_we0, "(port)dft_real_we0");
    sc_trace(mVcdFile, dft_real_address1, "(port)dft_real_address1");
    sc_trace(mVcdFile, dft_real_ce1, "(port)dft_real_ce1");
    sc_trace(mVcdFile, dft_real_d1, "(port)dft_real_d1");
    sc_trace(mVcdFile, dft_real_q1, "(port)dft_real_q1");
    sc_trace(mVcdFile, dft_real_we1, "(port)dft_real_we1");
    sc_trace(mVcdFile, dft_imag_address0, "(port)dft_imag_address0");
    sc_trace(mVcdFile, dft_imag_ce0, "(port)dft_imag_ce0");
    sc_trace(mVcdFile, dft_imag_d0, "(port)dft_imag_d0");
    sc_trace(mVcdFile, dft_imag_q0, "(port)dft_imag_q0");
    sc_trace(mVcdFile, dft_imag_we0, "(port)dft_imag_we0");
    sc_trace(mVcdFile, dft_imag_address1, "(port)dft_imag_address1");
    sc_trace(mVcdFile, dft_imag_ce1, "(port)dft_imag_ce1");
    sc_trace(mVcdFile, dft_imag_d1, "(port)dft_imag_d1");
    sc_trace(mVcdFile, dft_imag_q1, "(port)dft_imag_q1");
    sc_trace(mVcdFile, dft_imag_we1, "(port)dft_imag_we1");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, Stage1_real_i_q0, "Stage1_real_i_q0");
    sc_trace(mVcdFile, Stage1_real_t_q0, "Stage1_real_t_q0");
    sc_trace(mVcdFile, Stage1_imag_i_q0, "Stage1_imag_i_q0");
    sc_trace(mVcdFile, Stage1_imag_t_q0, "Stage1_imag_t_q0");
    sc_trace(mVcdFile, Stage2_real_i_q0, "Stage2_real_i_q0");
    sc_trace(mVcdFile, Stage2_real_t_q0, "Stage2_real_t_q0");
    sc_trace(mVcdFile, Stage2_imag_i_q0, "Stage2_imag_i_q0");
    sc_trace(mVcdFile, Stage2_imag_t_q0, "Stage2_imag_t_q0");
    sc_trace(mVcdFile, dft1_U0_ap_start, "dft1_U0_ap_start");
    sc_trace(mVcdFile, dft1_U0_ap_done, "dft1_U0_ap_done");
    sc_trace(mVcdFile, dft1_U0_ap_continue, "dft1_U0_ap_continue");
    sc_trace(mVcdFile, dft1_U0_ap_idle, "dft1_U0_ap_idle");
    sc_trace(mVcdFile, dft1_U0_ap_ready, "dft1_U0_ap_ready");
    sc_trace(mVcdFile, dft1_U0_real_sample_address0, "dft1_U0_real_sample_address0");
    sc_trace(mVcdFile, dft1_U0_real_sample_ce0, "dft1_U0_real_sample_ce0");
    sc_trace(mVcdFile, dft1_U0_imag_sample_address0, "dft1_U0_imag_sample_address0");
    sc_trace(mVcdFile, dft1_U0_imag_sample_ce0, "dft1_U0_imag_sample_ce0");
    sc_trace(mVcdFile, dft1_U0_dft_real_address0, "dft1_U0_dft_real_address0");
    sc_trace(mVcdFile, dft1_U0_dft_real_ce0, "dft1_U0_dft_real_ce0");
    sc_trace(mVcdFile, dft1_U0_dft_real_we0, "dft1_U0_dft_real_we0");
    sc_trace(mVcdFile, dft1_U0_dft_real_d0, "dft1_U0_dft_real_d0");
    sc_trace(mVcdFile, dft1_U0_dft_imag_address0, "dft1_U0_dft_imag_address0");
    sc_trace(mVcdFile, dft1_U0_dft_imag_ce0, "dft1_U0_dft_imag_ce0");
    sc_trace(mVcdFile, dft1_U0_dft_imag_we0, "dft1_U0_dft_imag_we0");
    sc_trace(mVcdFile, dft1_U0_dft_imag_d0, "dft1_U0_dft_imag_d0");
    sc_trace(mVcdFile, ap_channel_done_Stage1_imag, "ap_channel_done_Stage1_imag");
    sc_trace(mVcdFile, dft1_U0_dft_imag_full_n, "dft1_U0_dft_imag_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_Stage1_imag, "ap_sync_reg_channel_write_Stage1_imag");
    sc_trace(mVcdFile, ap_sync_channel_write_Stage1_imag, "ap_sync_channel_write_Stage1_imag");
    sc_trace(mVcdFile, ap_channel_done_Stage1_real, "ap_channel_done_Stage1_real");
    sc_trace(mVcdFile, dft1_U0_dft_real_full_n, "dft1_U0_dft_real_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_Stage1_real, "ap_sync_reg_channel_write_Stage1_real");
    sc_trace(mVcdFile, ap_sync_channel_write_Stage1_real, "ap_sync_channel_write_Stage1_real");
    sc_trace(mVcdFile, dft2_U0_ap_start, "dft2_U0_ap_start");
    sc_trace(mVcdFile, dft2_U0_ap_done, "dft2_U0_ap_done");
    sc_trace(mVcdFile, dft2_U0_ap_continue, "dft2_U0_ap_continue");
    sc_trace(mVcdFile, dft2_U0_ap_idle, "dft2_U0_ap_idle");
    sc_trace(mVcdFile, dft2_U0_ap_ready, "dft2_U0_ap_ready");
    sc_trace(mVcdFile, dft2_U0_real_sample_address0, "dft2_U0_real_sample_address0");
    sc_trace(mVcdFile, dft2_U0_real_sample_ce0, "dft2_U0_real_sample_ce0");
    sc_trace(mVcdFile, dft2_U0_imag_sample_address0, "dft2_U0_imag_sample_address0");
    sc_trace(mVcdFile, dft2_U0_imag_sample_ce0, "dft2_U0_imag_sample_ce0");
    sc_trace(mVcdFile, dft2_U0_dft_real_address0, "dft2_U0_dft_real_address0");
    sc_trace(mVcdFile, dft2_U0_dft_real_ce0, "dft2_U0_dft_real_ce0");
    sc_trace(mVcdFile, dft2_U0_dft_real_we0, "dft2_U0_dft_real_we0");
    sc_trace(mVcdFile, dft2_U0_dft_real_d0, "dft2_U0_dft_real_d0");
    sc_trace(mVcdFile, dft2_U0_dft_imag_address0, "dft2_U0_dft_imag_address0");
    sc_trace(mVcdFile, dft2_U0_dft_imag_ce0, "dft2_U0_dft_imag_ce0");
    sc_trace(mVcdFile, dft2_U0_dft_imag_we0, "dft2_U0_dft_imag_we0");
    sc_trace(mVcdFile, dft2_U0_dft_imag_d0, "dft2_U0_dft_imag_d0");
    sc_trace(mVcdFile, ap_channel_done_Stage2_imag, "ap_channel_done_Stage2_imag");
    sc_trace(mVcdFile, dft2_U0_dft_imag_full_n, "dft2_U0_dft_imag_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_Stage2_imag, "ap_sync_reg_channel_write_Stage2_imag");
    sc_trace(mVcdFile, ap_sync_channel_write_Stage2_imag, "ap_sync_channel_write_Stage2_imag");
    sc_trace(mVcdFile, ap_channel_done_Stage2_real, "ap_channel_done_Stage2_real");
    sc_trace(mVcdFile, dft2_U0_dft_real_full_n, "dft2_U0_dft_real_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_Stage2_real, "ap_sync_reg_channel_write_Stage2_real");
    sc_trace(mVcdFile, ap_sync_channel_write_Stage2_real, "ap_sync_channel_write_Stage2_real");
    sc_trace(mVcdFile, dft3_U0_ap_start, "dft3_U0_ap_start");
    sc_trace(mVcdFile, dft3_U0_ap_done, "dft3_U0_ap_done");
    sc_trace(mVcdFile, dft3_U0_ap_continue, "dft3_U0_ap_continue");
    sc_trace(mVcdFile, dft3_U0_ap_idle, "dft3_U0_ap_idle");
    sc_trace(mVcdFile, dft3_U0_ap_ready, "dft3_U0_ap_ready");
    sc_trace(mVcdFile, dft3_U0_real_sample_address0, "dft3_U0_real_sample_address0");
    sc_trace(mVcdFile, dft3_U0_real_sample_ce0, "dft3_U0_real_sample_ce0");
    sc_trace(mVcdFile, dft3_U0_imag_sample_address0, "dft3_U0_imag_sample_address0");
    sc_trace(mVcdFile, dft3_U0_imag_sample_ce0, "dft3_U0_imag_sample_ce0");
    sc_trace(mVcdFile, dft3_U0_dft_real_address0, "dft3_U0_dft_real_address0");
    sc_trace(mVcdFile, dft3_U0_dft_real_ce0, "dft3_U0_dft_real_ce0");
    sc_trace(mVcdFile, dft3_U0_dft_real_we0, "dft3_U0_dft_real_we0");
    sc_trace(mVcdFile, dft3_U0_dft_real_d0, "dft3_U0_dft_real_d0");
    sc_trace(mVcdFile, dft3_U0_dft_imag_address0, "dft3_U0_dft_imag_address0");
    sc_trace(mVcdFile, dft3_U0_dft_imag_ce0, "dft3_U0_dft_imag_ce0");
    sc_trace(mVcdFile, dft3_U0_dft_imag_we0, "dft3_U0_dft_imag_we0");
    sc_trace(mVcdFile, dft3_U0_dft_imag_d0, "dft3_U0_dft_imag_d0");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, Stage1_real_i_full_n, "Stage1_real_i_full_n");
    sc_trace(mVcdFile, Stage1_real_t_empty_n, "Stage1_real_t_empty_n");
    sc_trace(mVcdFile, Stage1_imag_i_full_n, "Stage1_imag_i_full_n");
    sc_trace(mVcdFile, Stage1_imag_t_empty_n, "Stage1_imag_t_empty_n");
    sc_trace(mVcdFile, Stage2_real_i_full_n, "Stage2_real_i_full_n");
    sc_trace(mVcdFile, Stage2_real_t_empty_n, "Stage2_real_t_empty_n");
    sc_trace(mVcdFile, Stage2_imag_i_full_n, "Stage2_imag_i_full_n");
    sc_trace(mVcdFile, Stage2_imag_t_empty_n, "Stage2_imag_t_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, dft1_U0_start_full_n, "dft1_U0_start_full_n");
    sc_trace(mVcdFile, dft1_U0_start_write, "dft1_U0_start_write");
    sc_trace(mVcdFile, dft2_U0_start_full_n, "dft2_U0_start_full_n");
    sc_trace(mVcdFile, dft2_U0_start_write, "dft2_U0_start_write");
    sc_trace(mVcdFile, dft3_U0_start_full_n, "dft3_U0_start_full_n");
    sc_trace(mVcdFile, dft3_U0_start_write, "dft3_U0_start_write");
#endif

    }
    mHdltvinHandle.open("top.hdltvin.dat");
    mHdltvoutHandle.open("top.hdltvout.dat");
}

top::~top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Stage1_real_U;
    delete Stage1_imag_U;
    delete Stage2_real_U;
    delete Stage2_imag_U;
    delete dft1_U0;
    delete dft2_U0;
    delete dft3_U0;
}

void top::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_logic_1;
}

void top::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_0;
}

void top::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void top::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_Stage1_imag = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (dft1_U0_ap_done.read() & 
             dft1_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_Stage1_imag = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_Stage1_imag = ap_sync_channel_write_Stage1_imag.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_Stage1_real = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (dft1_U0_ap_done.read() & 
             dft1_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_Stage1_real = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_Stage1_real = ap_sync_channel_write_Stage1_real.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_Stage2_imag = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (dft2_U0_ap_done.read() & 
             dft2_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_Stage2_imag = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_Stage2_imag = ap_sync_channel_write_Stage2_imag.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_Stage2_real = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (dft2_U0_ap_done.read() & 
             dft2_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_Stage2_real = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_Stage2_real = ap_sync_channel_write_Stage2_real.read();
        }
    }
}

void top::thread_ap_channel_done_Stage1_imag() {
    ap_channel_done_Stage1_imag = (dft1_U0_ap_done.read() & (ap_sync_reg_channel_write_Stage1_imag.read() ^ 
  ap_const_logic_1));
}

void top::thread_ap_channel_done_Stage1_real() {
    ap_channel_done_Stage1_real = (dft1_U0_ap_done.read() & (ap_sync_reg_channel_write_Stage1_real.read() ^ 
  ap_const_logic_1));
}

void top::thread_ap_channel_done_Stage2_imag() {
    ap_channel_done_Stage2_imag = (dft2_U0_ap_done.read() & (ap_sync_reg_channel_write_Stage2_imag.read() ^ 
  ap_const_logic_1));
}

void top::thread_ap_channel_done_Stage2_real() {
    ap_channel_done_Stage2_real = (dft2_U0_ap_done.read() & (ap_sync_reg_channel_write_Stage2_real.read() ^ 
  ap_const_logic_1));
}

void top::thread_ap_done() {
    ap_done = dft3_U0_ap_done.read();
}

void top::thread_ap_idle() {
    ap_idle = (dft1_U0_ap_idle.read() & dft2_U0_ap_idle.read() & dft3_U0_ap_idle.read() & (Stage1_real_t_empty_n.read() ^ 
  ap_const_logic_1) & (Stage1_imag_t_empty_n.read() ^ 
  ap_const_logic_1) & (Stage2_real_t_empty_n.read() ^ 
  ap_const_logic_1) & (Stage2_imag_t_empty_n.read() ^ 
  ap_const_logic_1));
}

void top::thread_ap_ready() {
    ap_ready = dft1_U0_ap_ready.read();
}

void top::thread_ap_sync_channel_write_Stage1_imag() {
    ap_sync_channel_write_Stage1_imag = ((ap_channel_done_Stage1_imag.read() & 
  dft1_U0_dft_imag_full_n.read()) | ap_sync_reg_channel_write_Stage1_imag.read());
}

void top::thread_ap_sync_channel_write_Stage1_real() {
    ap_sync_channel_write_Stage1_real = ((ap_channel_done_Stage1_real.read() & 
  dft1_U0_dft_real_full_n.read()) | ap_sync_reg_channel_write_Stage1_real.read());
}

void top::thread_ap_sync_channel_write_Stage2_imag() {
    ap_sync_channel_write_Stage2_imag = ((ap_channel_done_Stage2_imag.read() & 
  dft2_U0_dft_imag_full_n.read()) | ap_sync_reg_channel_write_Stage2_imag.read());
}

void top::thread_ap_sync_channel_write_Stage2_real() {
    ap_sync_channel_write_Stage2_real = ((ap_channel_done_Stage2_real.read() & 
  dft2_U0_dft_real_full_n.read()) | ap_sync_reg_channel_write_Stage2_real.read());
}

void top::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void top::thread_ap_sync_done() {
    ap_sync_done = dft3_U0_ap_done.read();
}

void top::thread_ap_sync_ready() {
    ap_sync_ready = dft1_U0_ap_ready.read();
}

void top::thread_dft1_U0_ap_continue() {
    dft1_U0_ap_continue = (ap_sync_channel_write_Stage1_imag.read() & ap_sync_channel_write_Stage1_real.read());
}

void top::thread_dft1_U0_ap_start() {
    dft1_U0_ap_start = ap_start.read();
}

void top::thread_dft1_U0_dft_imag_full_n() {
    dft1_U0_dft_imag_full_n = Stage1_imag_i_full_n.read();
}

void top::thread_dft1_U0_dft_real_full_n() {
    dft1_U0_dft_real_full_n = Stage1_real_i_full_n.read();
}

void top::thread_dft1_U0_start_full_n() {
    dft1_U0_start_full_n = ap_const_logic_0;
}

void top::thread_dft1_U0_start_write() {
    dft1_U0_start_write = ap_const_logic_0;
}

void top::thread_dft2_U0_ap_continue() {
    dft2_U0_ap_continue = (ap_sync_channel_write_Stage2_imag.read() & ap_sync_channel_write_Stage2_real.read());
}

void top::thread_dft2_U0_ap_start() {
    dft2_U0_ap_start = (Stage1_real_t_empty_n.read() & Stage1_imag_t_empty_n.read());
}

void top::thread_dft2_U0_dft_imag_full_n() {
    dft2_U0_dft_imag_full_n = Stage2_imag_i_full_n.read();
}

void top::thread_dft2_U0_dft_real_full_n() {
    dft2_U0_dft_real_full_n = Stage2_real_i_full_n.read();
}

void top::thread_dft2_U0_start_full_n() {
    dft2_U0_start_full_n = ap_const_logic_0;
}

void top::thread_dft2_U0_start_write() {
    dft2_U0_start_write = ap_const_logic_0;
}

void top::thread_dft3_U0_ap_continue() {
    dft3_U0_ap_continue = ap_const_logic_1;
}

void top::thread_dft3_U0_ap_start() {
    dft3_U0_ap_start = (Stage2_real_t_empty_n.read() & Stage2_imag_t_empty_n.read());
}

void top::thread_dft3_U0_start_full_n() {
    dft3_U0_start_full_n = ap_const_logic_0;
}

void top::thread_dft3_U0_start_write() {
    dft3_U0_start_write = ap_const_logic_0;
}

void top::thread_dft_imag_address0() {
    dft_imag_address0 = dft3_U0_dft_imag_address0.read();
}

void top::thread_dft_imag_address1() {
    dft_imag_address1 = ap_const_lv8_0;
}

void top::thread_dft_imag_ce0() {
    dft_imag_ce0 = dft3_U0_dft_imag_ce0.read();
}

void top::thread_dft_imag_ce1() {
    dft_imag_ce1 = ap_const_logic_0;
}

void top::thread_dft_imag_d0() {
    dft_imag_d0 = dft3_U0_dft_imag_d0.read();
}

void top::thread_dft_imag_d1() {
    dft_imag_d1 = ap_const_lv32_0;
}

void top::thread_dft_imag_we0() {
    dft_imag_we0 = dft3_U0_dft_imag_we0.read();
}

void top::thread_dft_imag_we1() {
    dft_imag_we1 = ap_const_logic_0;
}

void top::thread_dft_real_address0() {
    dft_real_address0 = dft3_U0_dft_real_address0.read();
}

void top::thread_dft_real_address1() {
    dft_real_address1 = ap_const_lv8_0;
}

void top::thread_dft_real_ce0() {
    dft_real_ce0 = dft3_U0_dft_real_ce0.read();
}

void top::thread_dft_real_ce1() {
    dft_real_ce1 = ap_const_logic_0;
}

void top::thread_dft_real_d0() {
    dft_real_d0 = dft3_U0_dft_real_d0.read();
}

void top::thread_dft_real_d1() {
    dft_real_d1 = ap_const_lv32_0;
}

void top::thread_dft_real_we0() {
    dft_real_we0 = dft3_U0_dft_real_we0.read();
}

void top::thread_dft_real_we1() {
    dft_real_we1 = ap_const_logic_0;
}

void top::thread_imag_sample_address0() {
    imag_sample_address0 = dft1_U0_imag_sample_address0.read();
}

void top::thread_imag_sample_address1() {
    imag_sample_address1 = ap_const_lv8_0;
}

void top::thread_imag_sample_ce0() {
    imag_sample_ce0 = dft1_U0_imag_sample_ce0.read();
}

void top::thread_imag_sample_ce1() {
    imag_sample_ce1 = ap_const_logic_0;
}

void top::thread_imag_sample_d0() {
    imag_sample_d0 = ap_const_lv32_0;
}

void top::thread_imag_sample_d1() {
    imag_sample_d1 = ap_const_lv32_0;
}

void top::thread_imag_sample_we0() {
    imag_sample_we0 = ap_const_logic_0;
}

void top::thread_imag_sample_we1() {
    imag_sample_we1 = ap_const_logic_0;
}

void top::thread_real_sample_address0() {
    real_sample_address0 = dft1_U0_real_sample_address0.read();
}

void top::thread_real_sample_address1() {
    real_sample_address1 = ap_const_lv8_0;
}

void top::thread_real_sample_ce0() {
    real_sample_ce0 = dft1_U0_real_sample_ce0.read();
}

void top::thread_real_sample_ce1() {
    real_sample_ce1 = ap_const_logic_0;
}

void top::thread_real_sample_d0() {
    real_sample_d0 = ap_const_lv32_0;
}

void top::thread_real_sample_d1() {
    real_sample_d1 = ap_const_lv32_0;
}

void top::thread_real_sample_we0() {
    real_sample_we0 = ap_const_logic_0;
}

void top::thread_real_sample_we1() {
    real_sample_we1 = ap_const_logic_0;
}

void top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"real_sample_address0\" :  \"" << real_sample_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_sample_ce0\" :  \"" << real_sample_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_sample_d0\" :  \"" << real_sample_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"real_sample_q0\" :  \"" << real_sample_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_sample_we0\" :  \"" << real_sample_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_sample_address1\" :  \"" << real_sample_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_sample_ce1\" :  \"" << real_sample_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_sample_d1\" :  \"" << real_sample_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"real_sample_q1\" :  \"" << real_sample_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"real_sample_we1\" :  \"" << real_sample_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imag_sample_address0\" :  \"" << imag_sample_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imag_sample_ce0\" :  \"" << imag_sample_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imag_sample_d0\" :  \"" << imag_sample_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"imag_sample_q0\" :  \"" << imag_sample_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imag_sample_we0\" :  \"" << imag_sample_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imag_sample_address1\" :  \"" << imag_sample_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imag_sample_ce1\" :  \"" << imag_sample_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imag_sample_d1\" :  \"" << imag_sample_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"imag_sample_q1\" :  \"" << imag_sample_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"imag_sample_we1\" :  \"" << imag_sample_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_real_address0\" :  \"" << dft_real_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_real_ce0\" :  \"" << dft_real_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_real_d0\" :  \"" << dft_real_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dft_real_q0\" :  \"" << dft_real_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_real_we0\" :  \"" << dft_real_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_real_address1\" :  \"" << dft_real_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_real_ce1\" :  \"" << dft_real_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_real_d1\" :  \"" << dft_real_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dft_real_q1\" :  \"" << dft_real_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_real_we1\" :  \"" << dft_real_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_imag_address0\" :  \"" << dft_imag_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_imag_ce0\" :  \"" << dft_imag_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_imag_d0\" :  \"" << dft_imag_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dft_imag_q0\" :  \"" << dft_imag_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_imag_we0\" :  \"" << dft_imag_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_imag_address1\" :  \"" << dft_imag_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_imag_ce1\" :  \"" << dft_imag_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_imag_d1\" :  \"" << dft_imag_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dft_imag_q1\" :  \"" << dft_imag_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dft_imag_we1\" :  \"" << dft_imag_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

